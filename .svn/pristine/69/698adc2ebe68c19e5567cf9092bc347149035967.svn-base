package joeun.project.service;


import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import joeun.project.dao.JsIUSER_listDao;
import joeun.project.dto.JsUSER_listDto;

@Service
public class JsUSER_listService implements JsIUSER_listService {

	@Autowired
	private SqlSession sqlSession;
	
	@Autowired
    private PasswordEncoder passwordEncoder; // 암호화된 비밀번호 비교를 위해 추가
	
	@Override
	public void insert(JsUSER_listDto dto) throws Exception { // 사용자 인설트
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		dao.insert(dto);
	}

	@Override
	public JsUSER_listDto checkId(String user_id, String user_pw) { // 사용자 로그인
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		return dao.checkId(user_id, user_pw);
	}

	@Override
	public boolean isIdAvailable(String user_id) { // 사용자 아이디 중복확인 0이면 ok 1이면 no
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		Integer count = dao.checkIdExists(user_id);
		System.out.println("이아이디 봐: " + user_id + "디버깅 몇개야ㅑㅑ: " + count);
		return count == 0; // count가 0이면 ID가 중복되지 않음

	}

	@Override
	public JsUSER_listDto getUserInfo(String user_id) throws Exception { // 사용자 아이디로 개인정보 찾기
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		return dao.selectByUserId(user_id);
	}

//   @Override
//   public Email_userLoginDto userDelete(String user_id) throws Exception {
//	   IEmail_userLoginDao dao = sqlSession.getMapper(IEmail_userLoginDao.class);
//       return dao.userDelete(user_id);
//   }
// 기존의 서비스 메소드입니다. 메소드의 리턴 타입을 void로 유지합니다.
	public void userDelete(String user_id) {
		// 삭제 작업을 수행하고 삭제된 행의 개수를 반환합니다.
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		int result = dao.userDelete(user_id);
		System.out.println("================================");
		// 삭제 작업의 성공 여부를 확인할 수 있습니다.
		if (result > 0) {
			System.out.println("회원 탈퇴 성공");
		} else {
			System.out.println("회원 탈퇴 실패");
		}
	}

	@Override
	public void userUpdate(String user_id, String current_pw, String new_pw) { // 같은 아이디에 있는 비밀번호를 new_pw로 변경
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		int updatedRows = dao.userUpdate(user_id, current_pw, new_pw);

		if (updatedRows == 0) {
			// 업데이트된 행이 없으므로 예외 처리
			throw new IllegalArgumentException("비밀번호가 일치하지 않거나 사용자를 찾을 수 없습니다.");
		}
	}

	@Override
	public JsUSER_listDto UserFindId(String user_name, String tel, String email) {
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		dao.UserFindId(user_name, tel, email);
		return dao.UserFindId(user_name, tel, email);
	}

	@Override
	public void sendVerificationEmail(String email, String verificationCode) throws Exception {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean verifyEmail(String userId, String verificationCode) throws Exception {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public JsUSER_listDto userLogin(String user_id) { // 사용자 로그인 할꺼임
		JsIUSER_listDao dao = sqlSession.getMapper(JsIUSER_listDao.class);
		return dao.userLogin(user_id);
	}

}
