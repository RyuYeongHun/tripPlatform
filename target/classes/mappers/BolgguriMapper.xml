<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="joeun.project.dao.IYhBolgguri_DetailDao">
	<!-- ID로 BolgguriDto 조회 -->
     <select id="selectBolgguriById" resultType="joeun.project.dto.YhBolgguriDto">
		SELECT a.bolgguri_id, a.addr1, a.mapx, a.mapy, a.mlevel, CASE WHEN LENGTH(NVL(a.tel, b.infocenter)) > 100 THEN null 
	    		ELSE NVL(a.tel, b.infocenter) END AS tel, a.title, a.disable_parking_yn, a.access_route_yn, a.helperdog_yn, 
	    		a.entry_route_yn, a.braille_blocks_yn, a.helper_yn, a.braille_signs_yn, a.bolgguri_desc, a.website, 
	    		NVL(a.opening_hours, b.usetime) AS opening_hours, NVL(a.holidays, b.restdate) AS holidays, 
	    		a.fee, a.restroom_yn, a.parking_cnt, NVL(a.pet_allow, b.chkpet) AS pet_allow, a.image_id, a.likes, 
	    		a.view_count, a.special_note, 
	    		(SELECT name FROM cat_code WHERE code = a.cat1) AS cat1_name, 
	    		(SELECT name FROM cat_code WHERE code = a.cat2) AS cat2_name,
	    		(SELECT name FROM cat_code WHERE code = a.cat3) AS cat3_name, b.opendate, b.restdate, b.usetime, b.parking, 
	    		b.accomcount, b.chkcreditcard, b.chkpet, b.expagerange, b.expguide, a.contentId
	    FROM 
	    		bolgguri a
	    LEFT JOIN 
	    		bolgguri_intro12 b ON b.contentId = a.contentId
	    Where bolgguri_id = #{bolgguri_id}
    </select>
    
	<select id="selectImagesByContentId" resultType="joeun.project.dto.YhBolgguri_content_imageDto">
        SELECT nvl(originimgurl, '/resources/imgMw/imgDefault.png') as originimgurl
        FROM content_image
        WHERE contentId = #{contentId}
    </select>
    
    <select id="selectReview" resultType="joeun.project.dto.YhBolgguri_ReviewDto">
	    SELECT r.reply_content, r.c_date, r.del_yn, r.user_id, r.score, r.review_id,
	    		(SELECT COUNT(*) FROM reviewlikes WHERE review_id = r.review_id) AS like_cnt
	    FROM bolgguri_review r
	    WHERE bolgguri_id = #{bolgguri_id}
	</select>
	
	<select id="averageScore" resultType="Double">
	    SELECT round(AVG(score),1) 
	    FROM BOLGGURI_REVIEW 
	    WHERE BOLGGURI_ID = #{bolgguri_id}
	</select>
	
    <select id="selectAccessFacilCodesByFacilId" resultType="joeun.project.dto.YhAccess_Facil_CodeDto">
	    SELECT B.NAME, B.IMAGE, B.IMAGE_CUR
		FROM ACCESS_FACIL A
		LEFT JOIN
		    ACCESS_FACIL_CODE B
		ON A.ACCESS_FACIL_ID = B.ACCESS_FACIL_ID
		WHERE A.BOLGGURI_ID = #{bolgguri_id, jdbcType=INTEGER}
		order by a.access_facil_id asc 
	</select>
	
	<insert id="insertLike" parameterType="map">
   		INSERT INTO likes (bolgguri_id, user_id)
    	VALUES (#{bolgguri_id}, #{user_id})
	</insert>

	<delete id="deleteLike" parameterType="map">
	    DELETE FROM likes
	    WHERE bolgguri_id = #{bolgguri_id} AND user_id = #{user_id}
	</delete>
	
	<select id="checkLikeExists" resultType="int" parameterType="map">
	    SELECT COUNT(*)
	    FROM likes
	    WHERE bolgguri_id = #{bolgguri_id} 
	    <if test="user_id != null and user_id != ''">
	   		AND user_id = #{user_id, jdbcType=VARCHAR}
	    </if>
	</select>
	
	<select id="countLikesByBolgguriId" resultType="int" parameterType="map">
        SELECT COUNT(*) 
        FROM likes 
        WHERE bolgguri_id = #{bolgguri_id}
    </select>
	
	<insert id="insertReview" parameterType="joeun.project.dto.YhBolgguri_ReviewDto">
    	INSERT INTO BOLGGURI_REVIEW (REPLY_CONTENT, C_DATE, LIKE_CNT, U_DATE, DEL_YN, BOLGGURI_ID, REVIEW_ID, USER_ID, score)
    	VALUES (#{reply_content}, sysdate, 0, null, 'N', #{bolgguri_id}, review_id_count.nextval, #{user_id}, #{score})
	</insert>
	
	<update id="updateLikeCount" parameterType="int">
	    UPDATE BOLGGURI_REVIEW
	    SET LIKE_CNT = LIKE_CNT + 1
	    WHERE REVIEW_ID = #{review_id}
	</update>
	
	<insert id="insertReviewLike" parameterType="joeun.project.dto.YhBolgguri_ReviewDto">
    	INSERT INTO reviewlikes (review_id, user_id)
    	VALUES (#{review_id.review_id}, #{user_id})
	</insert>

	<delete id="deleteReviewLike" parameterType="joeun.project.dto.YhBolgguri_ReviewDto">
	    DELETE FROM reviewlikes
	    WHERE review_id = #{review_id.review_id} AND user_id = #{user_id}
	</delete>
	
	<insert id="insertReviewLike2" parameterType="joeun.project.dto.YhBolgguri_ReviewDto">
    	INSERT INTO reviewlikes (review_id, user_id)
    	VALUES (#{review_id}, #{user_id})
	</insert>

	<delete id="deleteReviewLike2" parameterType="joeun.project.dto.YhBolgguri_ReviewDto">
	    DELETE FROM reviewlikes
	    WHERE review_id = #{review_id} AND user_id = #{user_id}
	</delete>
	<select id="checkReviewLikeExists" resultType="int">
	    SELECT COUNT(*)
	    FROM reviewlikes
	    WHERE review_id = #{review_id}
	    <if test="user_id != null and user_id != ''">
	   		AND user_id = #{user_id, jdbcType=VARCHAR}
	    </if>
	</select>
	
	<select id="reviewLikedByUser2" resultType="int">
	    SELECT COUNT(*)
	    FROM reviewlikes
	    WHERE review_id = #{review_id} AND user_id = #{user_id}
	</select>
	
	<select id="getReviewLikeCount" resultType="int" parameterType="int">
    	SELECT COUNT(*)
    	FROM reviewlikes
    	WHERE review_id = #{review_id}
	</select>
	
	
		<!-- 리뷰 수 계산 -->
	<select id="countReviews" parameterType="int" resultType="int">
	    SELECT COUNT(*) 
	    FROM bolgguri_review
	    WHERE bolgguri_id = #{bolgguri_id}
	</select>
	
	<!-- 페이징된 리뷰 목록 조회 -->
	<select id="selectReviewWithPaging" resultType="joeun.project.dto.YhBolgguri_ReviewDto">
	    <![CDATA[
		SELECT *
		FROM (
		    SELECT a.review_id, a.bolgguri_id, a.user_id, a.c_date, a.score, a.like_cnt, a.reply_content, ROWNUM AS rnum
		    FROM (
		        SELECT r.review_id, r.bolgguri_id, r.user_id, r.c_date, r.reply_content, r.score,
		               (SELECT COUNT(*) FROM reviewlikes rl WHERE rl.review_id = r.review_id) AS like_cnt
		        FROM bolgguri_review r
		        WHERE r.bolgguri_id = #{bolgguri_id}
		        ORDER BY r.c_date DESC
		    ) a
		    WHERE ROWNUM <= #{endRow}
		)
		WHERE rnum > #{offset}
	    ]]>
	</select>
	
	<select id="selectLocations" resultType="YhBolgguri_nearbyDto">
		<![CDATA[
		    SELECT a.mapx, a.mapy, a.title, a.firstimage, a.bolgguri_id
		    FROM bolgguri a
		    WHERE SQRT(POWER(a.mapx - #{centerX}, 2) + POWER(a.mapy - #{centerY}, 2)) * 111.32 <= #{radius}
		    and a.title not like '%''%'
		    and a.title not like '%"%'
		    FETCH FIRST 50 ROWS ONLY
		]]>
    </select>

	<delete id="reviewDelete" >
		DELETE FROM bolgguri_review
		WHERE review_id = #{review_id} AND user_id = #{user_id}
	</delete>
    
</mapper>









